$version Generated by VerilatedVcd $end
$date Mon Nov 30 14:23:14 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 9 clock $end
  $var wire 16 < io_address [15:0] $end
  $var wire  8 ? io_blue [7:0] $end
  $var wire 16 ; io_data [15:0] $end
  $var wire  8 @ io_green [7:0] $end
  $var wire  1 B io_hSync $end
  $var wire  1 = io_newData $end
  $var wire  8 > io_red [7:0] $end
  $var wire  1 A io_vSync $end
  $var wire  1 : reset $end
  $scope module MM2hdmi $end
   $var wire  1 9 clock $end
   $var wire 16 < io_address [15:0] $end
   $var wire  8 ? io_blue [7:0] $end
   $var wire 16 ; io_data [15:0] $end
   $var wire  8 @ io_green [7:0] $end
   $var wire  1 B io_hSync $end
   $var wire  1 = io_newData $end
   $var wire  8 > io_red [7:0] $end
   $var wire  1 A io_vSync $end
   $var wire  4 8 outControlCounter [3:0] $end
   $var wire 16 ' regData [15:0] $end
   $var wire  1 $ regHSync $end
   $var wire  8 ( regMuxRed0 [7:0] $end
   $var wire  8 ) regMuxRed1 [7:0] $end
   $var wire  8 2 regMuxRed10 [7:0] $end
   $var wire  8 3 regMuxRed11 [7:0] $end
   $var wire  8 4 regMuxRed12 [7:0] $end
   $var wire  8 5 regMuxRed13 [7:0] $end
   $var wire  8 6 regMuxRed14 [7:0] $end
   $var wire  8 7 regMuxRed15 [7:0] $end
   $var wire  8 * regMuxRed2 [7:0] $end
   $var wire  8 + regMuxRed3 [7:0] $end
   $var wire  8 , regMuxRed4 [7:0] $end
   $var wire  8 - regMuxRed5 [7:0] $end
   $var wire  8 . regMuxRed6 [7:0] $end
   $var wire  8 / regMuxRed7 [7:0] $end
   $var wire  8 0 regMuxRed8 [7:0] $end
   $var wire  8 1 regMuxRed9 [7:0] $end
   $var wire  1 # regNewData $end
   $var wire  5 % regRow [4:0] $end
   $var wire  1 & regVSync $end
   $var wire  1 : reset $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000 %
0&
b0000000000000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b0000 8
09
1:
b0000000000000000 ;
b0000000000000000 <
0=
b00000000 >
b00000000 ?
b00000000 @
0A
0B
#1
19
#2
09
#3
19
#4
09
#5
19
#6
09
#7
19
#8
09
#9
19
#10
09
0:
b0000000000001100 ;
1=
#11
1#
1$
b00001 %
b0000000000001100 '
b0001 8
19
1B
#12
09
0=
#13
0#
0$
b11111111 *
b11111111 +
b0000 8
19
0B
#14
09
#15
1$
b0001 8
19
1B
#16
09
#17
0$
b0010 8
19
b11111111 >
b11111111 ?
b11111111 @
0B
#18
09
#19
1$
b0011 8
19
1B
#20
09
#21
0$
b0100 8
19
b00000000 >
b00000000 ?
b00000000 @
0B
#22
09
#23
1$
b0101 8
19
1B
#24
09
#25
0$
b0110 8
19
0B
#26
09
#27
1$
b0111 8
19
1B
#28
09
#29
0$
b1000 8
19
0B
#30
09
#31
1$
b1001 8
19
1B
#32
09
#33
0$
b1010 8
19
0B
#34
09
#35
1$
b1011 8
19
1B
#36
09
#37
0$
b1100 8
19
0B
#38
09
#39
1$
b1101 8
19
1B
#40
09
#41
0$
b1110 8
19
0B
#42
09
#43
1$
b1111 8
19
1B
#44
09
b0000000000111111 ;
1=
#45
1#
0$
b00010 %
b0000000000111111 '
b0000 8
19
0B
#46
09
0=
#47
0#
1$
b11111111 (
b11111111 )
b11111111 ,
b11111111 -
19
b11111111 >
b11111111 ?
b11111111 @
1B
#48
09
#49
0$
b0001 8
19
0B
#50
09
#51
1$
b0010 8
19
1B
#52
09
#53
0$
b0011 8
19
0B
#54
09
#55
1$
b0100 8
19
1B
#56
09
#57
0$
b0101 8
19
0B
#58
09
#59
1$
b0110 8
19
b00000000 >
b00000000 ?
b00000000 @
1B
#60
09
#61
0$
b0111 8
19
0B
#62
09
#63
1$
b1000 8
19
1B
#64
09
#65
0$
b1001 8
19
0B
#66
09
#67
1$
b1010 8
19
1B
#68
09
#69
0$
b1011 8
19
0B
#70
09
#71
1$
b1100 8
19
1B
#72
09
#73
0$
b1101 8
19
0B
#74
09
#75
1$
b1110 8
19
1B
#76
09
#77
0$
b1111 8
19
0B
